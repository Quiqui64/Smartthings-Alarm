// This uses the following example http://www.avrfreaks.net/comment/804380#comment-804380 and https://github.com/emcniece/Arduino-Keybus
// Had to move functions above Setup because it would not compile if below loop
// Things to do, display alarm status ie armed/ready, fix refresh, add time?, comands to alarm
#define CLK 5 // GPIO5 Pin D1 Clock Pin, Keybus Yellow wire
#define DTA 4 // GPIO4 Pin D2 Data Pin, Keybus Green wire
#include <SPI.h> // For Keybus
#include <pgmspace.h> // For Keybus
#include <CRC32.h> // For Keybus
#define DEVICEID "0952" // For Keybus, not sure what this is used for
#include <ESP8266WiFi.h> // For OTA
#include <ESP8266mDNS.h> // For OTA
#include <WiFiUdp.h> // For OTA
#include <ArduinoOTA.h> // For OTA

const char* ssid = "XXXXXXXXXX";
const char* password = "XXXXXXXXX";
const unsigned int serverPort = 8090; // port to run the http server on esp8266, for smartthings hub
WiFiServer server(serverPort); //server
WiFiClient client; //client
String readString;
// Smartthings hub information
IPAddress hubIp(192, 168, 1, 170); // smartthings hub ip
const unsigned int hubPort = 39500; // smartthings hub port
int zone1State = 0;
int zone2State = 0;
int zone3State = 0;
int zone4State = 0;
int zone5State = 0;
int zone6State = 0;

char hex[] = "0123456789abcdef"; // For Keybus
String st, old; // For Keybus
unsigned long lastData; // For Keybus
char buf[100]; // For Keybus
// For Keybus
PROGMEM const uint32_t crc_table[16] = {
    0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,
    0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
    0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c
};

void clkCalled()
{
  if (st.length() > 200) return; // Do not overflow the arduino's little ram
  if (digitalRead(DTA)) st += "1"; else st += "0";
}

unsigned long waitCLKchange(int currentState)
{
  unsigned long c = 0;
  while (digitalRead(CLK) == currentState)
  {
    delayMicroseconds(10);
    c += 10;
    if (c > 10000) break;
  }
  return c;
}
String formatDisplay(String &st)
{
  String res;
  res = st.substring(0,8) + " " + st.substring(8,9) + " ";
  int grps = (st.length() - 9) / 8;
  for(int i=0;i<grps;i++)
  {
    res += st.substring(9+(i*8),9+((i+1)*8)) + " ";
  }
  res += st.substring((grps*8)+9,st.length());
  return res;
}
unsigned int getBinaryData(String &st, int offset, int length)
{
  int buf = 0;
  for(int j=0;j<length;j++)
  {
    buf <<= 1;
    if (st[offset+j] == '1') buf |= 1;
  }
  return buf;
}
String formatSt(String &st)
{
  String res = DEVICEID + String(";");
  res += String(hex[getBinaryData(st,0,4)]) + String(hex[getBinaryData(st,4,4)]) + String(";");
  int grps = (st.length() - 9) / 4;
  for(int i=0;i<grps;i++)
  {
    res += String(hex[getBinaryData(st,9+(i*4),4)]);
  }
  char buf[100];
  res.toCharArray(buf,100);
  unsigned long crc = crc_string(buf);
  res += String(";") + String(crc,HEX);
  return res;
}
unsigned long crc_update(unsigned long crc, byte data)
{
    byte tbl_idx;
    tbl_idx = crc ^ (data >> (0 * 4));
    crc = pgm_read_dword_near(crc_table + (tbl_idx & 0x0f)) ^ (crc >> 4);
    tbl_idx = crc ^ (data >> (1 * 4));
    crc = pgm_read_dword_near(crc_table + (tbl_idx & 0x0f)) ^ (crc >> 4);
    return crc;
}

unsigned long crc_string(char *s)
{
  unsigned long crc = ~0L;
  while (*s)
    crc = crc_update(crc, *s++);
  crc = ~crc;
  return crc;
}

// send data
int sendNotify(int a) //client function to send/receieve POST data.
{
  String tempSensor; // holds the sensor data converted from float
  String tempName; // holds the name of sensor
  int returnStatus = 1;
  if(a == 1){
    tempSensor = zone1State;// convert to string
    tempName = "{\"name\":\"Frontdoors\",\"value\":";// for zone1
  }
  else if(a == 2){
    tempSensor = zone2State;// convert to string
    tempName = "{\"name\":\"Motion\",\"value\":";// for zone2 motion detectors
  }
  else if(a == 3){
    tempSensor = zone3State;// convert to string
    tempName = "{\"name\":\"Frontwindows\",\"value\":";// for zone3
  }
  else if(a == 4){
    tempSensor = zone4State;// convert to string
    tempName = "{\"name\":\"Familyroomwindows\",\"value\":";// for zone4
  }
  else if(a == 5){
    tempSensor = zone5State;// convert to string
    tempName = "{\"name\":\"Kitchenwindows\",\"value\":";// for zone5
  }
  else if(a == 6){
    tempSensor = zone6State;// convert to string
    tempName = "{\"name\":\"Backdoor\",\"value\":";// for zone6
  }
  
  if (client.connect(hubIp, hubPort)) {
    client.println(F("POST / HTTP/1.1"));
    client.print(F("HOST: "));
    client.print(hubIp);
    client.print(F(":"));
    client.println(hubPort);
    //Build JSON string
    client.println(F("CONTENT-TYPE: application/json"));
    client.print(F("CONTENT-LENGTH: "));
    client.println((1+tempSensor.length())+tempName.length());
    client.println();
    client.print(tempName);
    client.print(tempSensor);
    client.println(F("}"));
  // 25 chars plus temp
//    Serial.println(F("CONTENT-TYPE: application/json"));
//    Serial.print(F("CONTENT-LENGTH: "));
//    Serial.println((1+tempSensor.length())+tempName.length());
//    Serial.println();
//    Serial.print(tempName);
//    Serial.print(tempSensor);
//    Serial.println(F("}"));
//    Serial.println("fanState is");
//    Serial.println(fanState);
  }
  else {
    //connection failed
    Serial.println("connection failed");
    returnStatus = 0;
    WiFi.begin(ssid, password);// reconnect
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
  }
  // read any data returned from the POST
  while(client.connected() && !client.available()) delay(1); //waits for data
  while (client.connected() || client.available()) { //connected or data available
    char c = client.read();
  }
  delay(1);
  client.stop();
  return returnStatus;
}

// send response to client for a request for status
void handleRequest(WiFiClient client)
{
  // Wait until the client sends some data
  Serial.print(F("Received request: "));
  while(!client.available())
  {
    delay(1);
  }
  // Read the first line of the request
  String req = client.readStringUntil('\r');
  Serial.println(req);
  if (!req.indexOf(F("GET")))
  {
    client.flush(); // we don't care about anything else for a GET request
  }
  // Match the request
  if (req.indexOf(F("/getstatus")) != -1) { // this is used for refresh
    client.println(F("HTTP/1.1 200 OK")); //send new page
    sendNotify(1);
    sendNotify(2);
    sendNotify(3);
    sendNotify(4);
    sendNotify(5);
    sendNotify(6);
  }
  else if (req.indexOf(F("/fanOff")) != -1) {// command to turn on fan
    client.println(F("HTTP/1.1 200 OK")); //send new page
  //  autoFanState = 0;
  //  sendNotify(5); // send fan autoOn state to hub
  }
  else if (req.indexOf(F("/fanOn")) != -1) {// command to turn off fan
    client.println(F("HTTP/1.1 200 OK")); //send new page
   // autoFanState = 1;
  //  sendNotify(5); // send fan autoOff state to hub
  }
  else if (req.indexOf(F("/autoOn")) != -1) {// command to turn off fan
    client.println(F("HTTP/1.1 200 OK")); //send new page
  //  autoFanState = 2;
  //  sendNotify(5); // send fan autoOff state to hub
  }
  else {
    client.println(F("HTTP/1.1 204 No Content"));
    client.println();
    client.println();
  }
  delay(1);
  //stopping client
  client.stop();
}

void setup()
{
  pinMode(CLK,INPUT);
  pinMode(DTA,INPUT);
 // Serial.begin(9600);
  Serial.println("Booting");
  attachInterrupt(digitalPinToInterrupt(CLK), clkCalled, RISING);// calls clkCalled function
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }
   // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  ArduinoOTA.setHostname("Alarm");

  // No authentication by default
  // ArduinoOTA.setPassword((const char *)"123");

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  // Start the server
  server.begin();
  Serial.println("Server started");
  // Print the IP address
  Serial.println(WiFi.localIP()); 
}
void loop()
{
  ArduinoOTA.handle();
  // Handle any incoming requests
  WiFiClient client = server.available();
  if (client) 
  {
    handleRequest(client);
  }
//  if (millis() - lastData > 500)
//    digitalWrite(13,0);
//  else
//    digitalWrite(13,1);
 
  if (waitCLKchange(1) < 2000) return;
  String stc = st;
  st = "";
 
  int cmd = getBinaryData(stc,0,8);
//  if (cmd == 0x05) lastData = millis(); // Reset led counter
 
  if (stc == old) return;
  if (cmd == 0) return;
 
  old = stc;
 
  String msg;
 
  // Interpreter les donnees
  if (cmd == 0x05)
  {
    if (getBinaryData(stc,12,1)) msg += "Error";
    if (getBinaryData(stc,13,1)) msg += "Bypass";
    if (getBinaryData(stc,14,1)) msg += "Memory";
    if (getBinaryData(stc,15,1)) msg += "Armed";
    if (getBinaryData(stc,16,1)) msg += "Ready";
  }
 
//  if (cmd == 0xa5) // May use later to verify everything is talking
//  {
//    int year3 = getBinaryData(stc,9,4);
//    int year4 = getBinaryData(stc,13,4);
//    int month = getBinaryData(stc,19,4);
//    int day = getBinaryData(stc,23,5);
//    int hour = getBinaryData(stc,28,5);
//    int minute = getBinaryData(stc,33,6);
//    msg += "Date: 20" + String(year3) + String(year4) + "-" + String(month) + "-" + String(day) + " " + String(hour) + ":" + String(minute);
//  }
  if (cmd == 0x27)
  {
    //msg += "Zones: ";
    int zones = getBinaryData(stc,8+1+8+8+8+8,8);
    if (zones & 1){
      if(zone1State == 1){
        zone1State = 0;
        sendNotify(1);
      }
    }
    else{
      if(zone1State == 0){
        zone1State = 1;
        sendNotify(1);
      }
    } 
    if (zones & 2){
      if(zone2State == 1){
        zone2State = 0;
        sendNotify(2);
      }
    }
    else{
      if(zone2State == 0){
        zone2State = 1;
        sendNotify(2);
      }
    }
    if (zones & 4){
      if(zone3State == 1){
        zone3State = 0;
        sendNotify(3);
      }
    }
    else{
      if(zone3State == 0){
        zone3State = 1;
        sendNotify(3);
      }
    }
    if (zones & 8){
      if(zone4State == 1){
        zone4State = 0;
        sendNotify(4);
      }
    }
    else{
      if(zone4State == 0){
        zone4State = 1;
        sendNotify(4);
      }
    }
    if (zones & 16){
      if(zone5State == 1){
        zone5State = 0;
        sendNotify(2);
      }
    }
    else{
      if(zone5State == 0){
        zone5State = 1;
        sendNotify(5);
      }
    }
    if (zones & 32) {
      if(zone6State == 1){      
       zone6State = 0;
       sendNotify(6);
      }           
    }
    else {  
      if(zone6State == 0){   
       zone6State = 1;
       sendNotify(6); 
      }  
    }
       
    // if (zones & 64) msg += "7"; // Only use 6 zones
    // if (zones & 128) msg += "8"; // Only use 6 zones
  }
//  Serial.print(formatDisplay(stc));
//  Serial.print("-> ");
//  Serial.print(cmd,HEX);
//  Serial.print(":");
//  Serial.println(msg);

}




