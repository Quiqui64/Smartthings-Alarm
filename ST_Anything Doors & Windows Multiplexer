/** Using this for sending esp8266 alram info to virtual devices for alarm
 *  ST_Anything Doors & Windows Multiplexer - ST_Anything_Doors_Windows_Multiplexer.smartapp.groovy
 *
 *  Copyright 2015 Daniel Ogorchock
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Change History:
 *
 *    Date        Who            What
 *    ----        ---            ----
 *    2015-10-31  Dan Ogorchock  Original Creation
 *
 */
 
definition(
    name: "ST_Anything Doors & Windows Multiplexer",
    namespace: "ogiewon",
    author: "Daniel Ogorchock",
    description: "Connects single Arduino with multiple ContactSensor devices to their virtual device counterparts.",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")

preferences {

	section("Select the House Doors (Virtual Contact Sensor devices)") {
		input "Frontdoors", title: "Virtual Contact Sensor for Front Doors", "capability.contactSensor"
		input "Backdoor", title: "Virtual Contact Sensor for Back Door", "capability.contactSensor"
		
	}

	section("Select the Windows (Virtual Contact Sensor devices)") {
		input "Frontwindows", title: "Virtual Contact Sensor for Front Windows", "capability.contactSensor"
		input "Familyroomwindows", title: "Virtual Contact Sensor for Familyroom Windows", "capability.contactSensor"
		input "Kitchenwindows", title: "Virtual Contact Sensor for Kitchen Windows", "capability.contactSensor"
		
	}

	section("Select the Arduino ST_Anything_Doors_Windows device") {
		input "arduino", "capability.contactSensor"
    }    
}

def installed() {
	log.debug "Installed with settings: ${settings}"
	subscribe()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	subscribe()
}

def subscribe() {

   
    subscribe(arduino, "Frontdoors.open", FrontdoorsOpen)
    subscribe(arduino, "Frontdoors.closed", FrontdoorsClosed)
    
    subscribe(arduino, "Backdoor.open", BackdoorOpen)
    subscribe(arduino, "Backdoor.closed", BackdoorClosed)

    subscribe(arduino, "Frontwindows.open", FrontwindowsOpen)
    subscribe(arduino, "Frontwindows.closed", FrontwindowsClosed)

    subscribe(arduino, "Familyroomwindows.open", FamilyroomwindowsOpen)
    subscribe(arduino, "Familyroomwindows.closed", FamilyroomwindowsClosed)

    subscribe(arduino, "Kitchenwindows.open", KitchenwindowsOpen)
    subscribe(arduino, "Kitchenwindows.closed", KitchenwindowsClosed)

}

// --- Front Door --- 
def FrontdoorsOpen(evt)
{
    if (Frontdoors.currentValue("contact") != "open") {
    	log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    	Frontdoors.openme()
    }
}

def FrontdoorsClosed(evt)
{
    if (Frontdoors.currentValue("contact") != "closed") {
		log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    	Frontdoors.closeme()
    }
}

// --- Backdoor Door --- 
def BackdoorOpen(evt)
{
    if (Backdoor.currentValue("contact") != "open") {
		log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    	Backdoor.openme()
    }
}

def BackdoorClosed(evt)
{
    if (Backdoor.currentValue("contact") != "closed") {
		log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
    	Backdoor.closeme()
	}
}

// --- Kitchen Windows --- 
def FrontwindowsOpen(evt)
{
    if (Frontwindows.currentValue("contact") != "open") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
 	   Frontwindows.openme()
	}
}

def FrontwindowsClosed(evt)
{
    if (Frontwindows.currentValue("contact") != "closed") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
	    Frontwindows.closeme()
	}
}

// --- Familyroomwindows --- 
def FamilyroomwindowsOpen(evt)
{
    if (Familyroomwindows.currentValue("contact") != "open") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
 	   Familyroomwindows.openme()
	}
}

def FamilyroomwindowsClosed(evt)
{
    if (Familyroomwindows.currentValue("contact") != "closed") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
	    Familyroomwindows.closeme()
	}
}

// --- Kitchen Windows --- 
def KitchenwindowsOpen(evt)
{
    if (Kitchenwindows.currentValue("contact") != "open") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
 	   Kitchenwindows.openme()
	}
}

def KitchenwindowsClosed(evt)
{
    if (Kitchenwindows.currentValue("contact") != "closed") {
	    log.debug "arduinoevent($evt.name: $evt.value: $evt.deviceId)"
	    Kitchenwindows.closeme()
	}
}

def initialize() {
	// TODO: subscribe to attributes, devices, locations, etc.
}
